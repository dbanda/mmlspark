{"paragraphs":[{"text":"%md\n# Creating a searchable Art Database with The MET's open-access collection\nIn this example, we show how you can enrich data using Cognitive Skills and write to an Azure Search Index using MMLSpark. We use a subset of The MET's open-access collection and enrich it by passing it through 'Describe Image' and a custom 'Image Similarity' skill. The results are then written to a searchable index.\n","user":"anonymous","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"progressUpdateIntervalMs":500,"jobName":"paragraph_1593563180354_1623127516","id":"paragraph_1593563180354_1623127516","dateCreated":"2020-07-01T00:52:15+0000","status":"FINISHED","focus":true,"$$hashKey":"object:10922","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Creating a searchable Art Database with The MET&rsquo;s open-access collection</h1>\n<p>In this example, we show how you can enrich data using Cognitive Skills and write to an Azure Search Index using MMLSpark. We use a subset of The MET&rsquo;s open-access collection and enrich it by passing it through &lsquo;Describe Image&rsquo; and a custom &lsquo;Image Similarity&rsquo; skill. The results are then written to a searchable index.</p>\n</div>"}]},"runtimeInfos":{}},{"text":"%spark.dep\n// include the azure mmlspark dependency\nz.reset()\nz.addRepo(\"maven\").url(\"https://repo1.maven.org/maven2\")\nz.addRepo(\"mmlspark\").url(\"https://mmlspark.azureedge.net/maven\")\n\n// exclude hadoop since we have installed 3 on this image\nz.load(\"com.microsoft.ml.spark:mmlspark_2.11:1.0.0-rc1\").exclude(\"org.apache.hadoop:*\")\n","user":"anonymous","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"progressUpdateIntervalMs":500,"jobName":"paragraph_1593564625132_1993180319","id":"paragraph_1593564625132_1993180319","dateCreated":"2020-07-01T00:53:24+0000","status":"READY","$$hashKey":"object:10923","runtimeInfos":{}},{"text":"%spark.pyspark\n# add mmlspark jars to path\nimport sys\nsys.path.extend(sc.getConf().get(\"spark.jars\").split(\",\"))","user":"anonymous","dateUpdated":"2020-07-01T00:51:24+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"progressUpdateIntervalMs":500,"jobName":"paragraph_1593564662834_-1587198652","id":"paragraph_1593564662834_-1587198652","dateCreated":"2020-07-01T00:51:02+0000","dateStarted":"2020-07-01T00:51:24+0000","dateFinished":"2020-07-01T00:51:25+0000","status":"FINISHED","$$hashKey":"object:10924"},{"text":"%spark.pyspark\r\nimport os, sys, time, json\r\nfrom pyspark.ml import Transformer, Estimator, Pipeline\r\nfrom pyspark.ml.feature import SQLTransformer\r\nfrom pyspark.sql.functions import lit, udf, col, split","user":"anonymous","dateUpdated":"2020-07-01T00:03:39+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"progressUpdateIntervalMs":500,"jobName":"paragraph_1593561778030_1271754206","id":"paragraph_1593561778030_1271754206","dateCreated":"2020-07-01T00:02:58+0000","dateStarted":"2020-07-01T00:03:39+0000","dateFinished":"2020-07-01T00:03:39+0000","status":"FINISHED","$$hashKey":"object:10925"},{"text":"%spark.pyspark\nVISION_API_KEY = os.environ['VISION_API_KEY']\nAZURE_SEARCH_KEY = os.environ['AZURE_SEARCH_KEY']\nsearch_service = \"mmlspark-azure-search\"\nsearch_index = \"test\"","user":"anonymous","dateUpdated":"2020-07-01T00:39:36+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"progressUpdateIntervalMs":500,"jobName":"paragraph_1593561833727_526089657","id":"paragraph_1593561833727_526089657","dateCreated":"2020-07-01T00:03:53+0000","dateStarted":"2020-07-01T00:04:05+0000","dateFinished":"2020-07-01T00:04:05+0000","status":"FINISHED","$$hashKey":"object:10926"},{"text":"%spark.pyspark\n\ndata = spark.read\\\n  .format(\"csv\")\\\n  .option(\"header\", True)\\\n  .load(\"wasbs://publicwasb@mmlspark.blob.core.windows.net/metartworks_sample.csv\")\\\n  .withColumn(\"searchAction\", lit(\"upload\"))\\\n  .withColumn(\"Neighbors\", split(col(\"Neighbors\"), \",\").cast(\"array<string>\"))\\\n  .withColumn(\"Tags\", split(col(\"Tags\"), \",\").cast(\"array<string>\"))\\\n  .limit(25)","user":"anonymous","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"progressUpdateIntervalMs":500,"jobName":"paragraph_1593561868051_-1561326260","id":"paragraph_1593561868051_-1561326260","dateCreated":"2020-07-01T00:53:09+0000","status":"FINISHED","$$hashKey":"object:10927","results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{}},{"text":"%spark.pyspark\n# show the dataframe in zeppelin\ndef img_to_html(im):\n    return f'<img src=\"{im}\" style=\"width: 50px;\">'\nz.show(\"%html \"  + data.limit(5).toPandas()[[\"PrimaryImageUrl\", \"ObjectID\", \"Tags\"]].to_html(formatters={'PrimaryImageUrl': img_to_html}, escape=False))","user":"anonymous","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"PrimaryImageUrl":"string","ObjectID":"string","Tags":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"progressUpdateIntervalMs":500,"jobName":"paragraph_1593561900920_-988529759","id":"paragraph_1593561900920_-988529759","dateCreated":"2020-07-01T00:53:14+0000","status":"FINISHED","$$hashKey":"object:10928","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PrimaryImageUrl</th>\n      <th>ObjectID</th>\n      <th>Tags</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td><img src=\"https://images.metmuseum.org/CRDImages/ad/original/144703.jpg\" style=\"width: 50px;\"></td>\n      <td>100</td>\n      <td>[UtilitarianObjects]</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td><img src=\"https://images.metmuseum.org/CRDImages/ad/original/243157.jpg\" style=\"width: 50px;\"></td>\n      <td>238</td>\n      <td>[Chairs]</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td><img src=\"https://images.metmuseum.org/CRDImages/ad/original/235453.jpg\" style=\"width: 50px;\"></td>\n      <td>283</td>\n      <td>[Birds, Plants]</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td><img src=\"https://images.metmuseum.org/CRDImages/ad/original/DP235021.jpg\" style=\"width: 50px;\"></td>\n      <td>788</td>\n      <td>[Bowls]</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td><img src=\"https://images.metmuseum.org/CRDImages/ad/original/34602.jpg\" style=\"width: 50px;\"></td>\n      <td>823</td>\n      <td>[Bowls]</td>\n    </tr>\n  </tbody>\n</table>\n"}]},"runtimeInfos":{}},{"text":"%spark.pyspark\nfrom mmlspark.cognitive import AnalyzeImage\nfrom mmlspark.stages import SelectColumns\n\n#define pipeline\ndescribeImage = (AnalyzeImage()\n  .setSubscriptionKey(VISION_API_KEY)\n  .setLocation(\"eastus\")\n  .setImageUrlCol(\"PrimaryImageUrl\")\n  .setOutputCol(\"RawImageDescription\")\n  .setErrorCol(\"Errors\")\n  .setVisualFeatures([\"Categories\", \"Tags\", \"Description\", \"Faces\", \"ImageType\", \"Color\", \"Adult\"])\n  .setConcurrency(5))\n\ndf2 = describeImage.transform(data)\\\n  .select(\"*\", \"RawImageDescription.*\").drop(\"Errors\", \"RawImageDescription\")","user":"anonymous","dateUpdated":"2020-07-01T00:39:42+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"progressUpdateIntervalMs":500,"jobName":"paragraph_1593563216745_842899432","id":"paragraph_1593563216745_842899432","dateCreated":"2020-07-01T00:26:56+0000","dateStarted":"2020-07-01T00:27:05+0000","dateFinished":"2020-07-01T00:27:09+0000","status":"FINISHED","$$hashKey":"object:10929"},{"text":"%md\r\nBefore writing the results to a Search Index, you must define a schema which must specify the name, type, and attributes of each field in your index. Refer to [Create a basic index in Azure Search](https://docs.microsoft.com/en-us/azure/search/search-what-is-an-index) for more information.","user":"anonymous","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"progressUpdateIntervalMs":500,"jobName":"paragraph_1593561799500_2131671255","id":"paragraph_1593561799500_2131671255","dateCreated":"2020-07-01T00:52:23+0000","status":"FINISHED","$$hashKey":"object:10930","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Before writing the results to a Search Index, you must define a schema which must specify the name, type, and attributes of each field in your index. Refer to <a href=\"https://docs.microsoft.com/en-us/azure/search/search-what-is-an-index\">Create a basic index in Azure Search</a> for more information.</p>\n</div>"}]},"runtimeInfos":{}},{"text":"%spark.pyspark\nfrom mmlspark.cognitive import *\ndf2.writeToAzureSearch(\n  subscriptionKey=AZURE_SEARCH_KEY,\n  actionCol=\"searchAction\",\n  serviceName=search_service,\n  indexName=search_index,\n  keyCol=\"ObjectID\"\n)","user":"anonymous","dateUpdated":"2020-07-01T00:30:22+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"progressUpdateIntervalMs":500,"jobName":"paragraph_1593563350537_-472581137","id":"paragraph_1593563350537_-472581137","dateCreated":"2020-07-01T00:29:10+0000","dateStarted":"2020-07-01T00:29:24+0000","dateFinished":"2020-07-01T00:29:27+0000","status":"ERROR","$$hashKey":"object:10931"},{"text":"%md\n\nThe Search Index can be queried using the [Azure Search REST API](https://docs.microsoft.com/rest/api/searchservice/) by sending GET or POST requests and specifying query parameters that give the criteria for selecting matching documents. For more information on querying refer [Query your Azure Search index using the REST API](https://docs.microsoft.com/en-us/rest/api/searchservice/Search-Documents)","user":"anonymous","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"progressUpdateIntervalMs":500,"jobName":"paragraph_1593563432825_-513755380","id":"paragraph_1593563432825_-513755380","dateCreated":"2020-07-01T00:52:55+0000","status":"FINISHED","$$hashKey":"object:10932","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>The Search Index can be queried using the <a href=\"https://docs.microsoft.com/rest/api/searchservice/\">Azure Search REST API</a> by sending GET or POST requests and specifying query parameters that give the criteria for selecting matching documents. For more information on querying refer <a href=\"https://docs.microsoft.com/en-us/rest/api/searchservice/Search-Documents\">Query your Azure Search index using the REST API</a></p>\n</div>"}]},"runtimeInfos":{}},{"text":"%sh\npip install requests","user":"anonymous","dateUpdated":"2020-07-01T00:37:56+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/sh"},"settings":{"params":{},"forms":{}},"apps":[],"progressUpdateIntervalMs":500,"jobName":"paragraph_1593563867631_816253712","id":"paragraph_1593563867631_816253712","dateCreated":"2020-07-01T00:37:47+0000","dateStarted":"2020-07-01T00:37:56+0000","dateFinished":"2020-07-01T00:38:08+0000","status":"FINISHED","$$hashKey":"object:10933"},{"text":"%spark.pyspark\r\nimport requests\r\nurl = 'https://{}.search.windows.net/indexes/{}/docs/search?api-version=2019-05-06'.format(search_service, search_index)\r\nrequests.post(url, json={\"search\": \"Glass\"}, headers = {\"api-key\": AZURE_SEARCH_KEY}).json()","user":"anonymous","dateUpdated":"2020-07-01T00:38:53+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"progressUpdateIntervalMs":500,"jobName":"paragraph_1593563258665_-1219821158","id":"paragraph_1593563258665_-1219821158","dateCreated":"2020-07-01T00:27:38+0000","dateStarted":"2020-07-01T00:38:53+0000","dateFinished":"2020-07-01T00:38:55+0000","status":"ERROR","$$hashKey":"object:10934"}],"name":"MET_artwork","id":"2FBFDCSQK","defaultInterpreterGroup":"spark","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}